name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  terraform-checks:
    name: Terraform Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        run: terraform fmt -check -recursive

      - name: Terraform init
        run: terraform init

      - name: Terraform validate
        run: terraform validate

      - name: TFLint
        uses: terraform-linters/setup-tflint@v4
      - run: tflint --init && tflint

      - name: Checkov - IaC Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true

  build-and-deploy:
    name: Build & Deploy App to ECS
    runs-on: ubuntu-latest
    needs: terraform-checks
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPO: ${{ secrets.ECR_REPO }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        id: vars
        run: echo "IMAGE_TAG=latest" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPO:$IMAGE_TAG .

      - name: Scan Docker image with Snyk
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
          args: --file=Dockerfile

      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REPO:$IMAGE_TAG

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ secrets.ECS_CLUSTER }}
          service: ${{ secrets.ECS_SERVICE }}
          image: ${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
          wait-for-service-stability: true
